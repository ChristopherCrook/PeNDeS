/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Fri Apr 30 2021 14:48:25 GMT-0500 (CDT).
 */

define(['jointjs', 'css!./styles/PeNDeSWidget.css'], function (joint) {
    'use strict';

    var WIDGET_CLASS = 'pe-n-de-s';

    function PeNDeSWidget(logger, container, client) {
        this._logger = logger.fork('Widget');

        this._el = container;
        this.client = client;

        this.nodes = {};
        this._initialize();

        this._logger.debug('ctor finished');
    }

    PeNDeSWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);
        
        this.graph = new joint.dia.Graph();
        this.paper = new joint.dia.Paper({
          el: this._el,
          width: width,
          height: height,
          model: this.graph,
          interactive: false
        });
        
        this.pn = joint.shapes.pn;
        this.shapes = [];

        // Test the shapes (Test only)
        /*
        var rect = new joint.shapes.standard.Rectangle();
        rect.position(100,30);
        rect.resize(100,40);
        rect.addTo(this.graph);
        */
        
        this.rawMETA = this.client.getAllMetaNodes();
        this.META = {};
      
        this.rawMETA.forEach(node => {
          this.META[node.getAttribute('name')] = node.getId();
        });

        // Registering to events can be done with jQuery (as normal)
        this._el.on('dblclick', function (event) {
            event.stopPropagation();
            event.preventDefault();
            self.onBackgroundDblClick();
        });
    };

    PeNDeSWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    // Adding/Removing/Updating items
    PeNDeSWidget.prototype.addNode = function (node) {
      if (node) {
        if (this.client.isTypeOf(node, this.META['place']))
        {
          var circle = new joint.shapes.standard.Circle({
            position: node.getRegistry('position'),
            size: { width: 40, height: 40 },
          });
          circle.attr('label/text', node.getAttribute('name'));
          circle.addTo(this.graph);
          var shape = {m_node: node, m_shape: circle};
          this.shapes.push(shape);
        }
        if (this.client.isTypeOf(node, this.META['transition']))
        {
          var rect = new joint.shapes.standard.Rectangle({
            position: node.getRegistry('position'),
            size: { width: 10, height: 70 }
          });
          rect.attr('label/text', node.getAttribute('name'));
          rect.addTo(this.graph);
          var shape = {m_node: node, m_shape: rect};
          this.shapes.push(shape);
        }
        if (this.client.isTypeOf(node, this.META['inplace']))
        {
          var circle = new joint.shapes.standard.Circle({
            position: node.getRegistry('position'),
            size: { width: 40, height: 40 }
          });
          circle.attr('label/text', node.getAttribute('name'));
          circle.addTo(this.graph);
          var shape = {m_node: node, m_shape: circle};
          this.shapes.push(shape);
        }
        if (this.client.isTypeOf(node, this.META['outplace']))
        {
          var circle = new joint.shapes.standard.Circle({
            position: node.getRegistry('position'),
            size: { width: 40, height: 40 }
          });
          circle.attr('label/text', node.getAttribute('name'));
          circle.addTo(this.graph);
          var shape = {m_node: node, m_shape: circle};
          this.shapes.push(shape);
        }
        if (this.client.isTypeOf(node, this.META['arc']))
        {
          // Get the pointers for the arc
          var pointers = node.getPointerNames();
          
          // Get the paths for each pointer
          var source;
          var target;
          pointers.forEach(pointer => {
            if (pointer == "src")
            {
              source = pointer;
            }
            if (pointer == "dest")
            {
              target = pointer;
            }
          });
          
          // Now make a connection
          if (source && target)
          {
            var src = this.client.getNode(node.getPointerId(source));
            var dst = this.client.getNode(node.getPointerId(target));
            var link = new joint.shapes.standard.Link();
            link.prop('source', src.getRegistry('position'));
            link.prop('target', dst.getRegistry('position'));
            //link.addTo(this.graph);
          }
        }
        if (this.client.isTypeOf(node, this.META['Net']))
        {
          var children = [];
          children = node.getChildrenIds();
          children.forEach(child => {
            this.addNode(this.client.getNode(child));
          });
        }
      }
      this.paper.updateViews();
    };
    
    PeNDeSWidget.prototype.Fire = function() {
      
    };

    PeNDeSWidget.prototype.removeNode = function (gmeId) {
        var desc = this.nodes[gmeId];
        this._el.append('<div>Removing node "' + desc.name + '"</div>');
        delete this.nodes[gmeId];
    };

    PeNDeSWidget.prototype.updateNode = function (desc) {
        if (desc) {
            this._logger.debug('Updating node:', desc);
            this._el.append('<div>Updating node "' + desc.name + '"</div>');
        }
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    PeNDeSWidget.prototype.onNodeClick = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };

    PeNDeSWidget.prototype.onBackgroundDblClick = function () {
        this._el.append('<div>Background was double-clicked!!</div>');
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    PeNDeSWidget.prototype.destroy = function () {
    };

    PeNDeSWidget.prototype.onActivate = function () {
        this._logger.debug('PeNDeSWidget has been activated');
    };

    PeNDeSWidget.prototype.onDeactivate = function () {
        this._logger.debug('PeNDeSWidget has been deactivated');
    };

    return PeNDeSWidget;
});
